openapi: 3.0.3
info:
  title: WASAPhoto By Gianluca Gabriel Monte 1982801
  description: |-
    This OpenAPI document describes the API for WASAPhoto, a social network focused on sharing
    key moments with your friends, by posting pictures that others can like and comment on!
    This document may be subject to changes overtime. Please note that a "soft" approach
    was the path of choice regarding bans, so the response in case a user is banned will just
    be a 404 not found error.
    The authentication token is set to be an UUID, but this can change when the backend is
    complete since more efficient or versatile configurations could be implemented.
  version: '1'

paths:
  /login:
    post:
      tags: ['Own User']
      summary: Logs in the user
      description: |-
        If the user does not exist it will be created and logged in automatically,
        and the User object is returned along with a token for authentication.
        The user token is a UUID.
      operationId: doLogin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: Maria
                  pattern: 'ˆ.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '200':
          description: User log-in successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    example: '550e8400-e29b-41d4-a716-446655440000'
          '201':
          description: User created and log-in successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    example: '550e8400-e29b-41d4-a716-446655440000'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userid}/username:
    patch:
      tags: ['Own User']
      summary: Changes the user's display name
      description: |-
        If the user does not exist, it will return an error (404).
        If the user exists but the token is incorrect, it will also return an error, stating that the action is not permitted.
        If everything goes fine it will return code 200.
      operationId: setMyUserName
      parameters:
        - name: userid
          in: path
          description: id of the current user
          required: true
          schema:
            type: string
            example: '12s74fd8440d'
            pattern: 'ˆ.*?$'
            minLength: 15
            maxLength: 30
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                newname:
                  type: string
                  example: 'Maria123'
                  pattern: 'ˆ.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Username change successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Action forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userid}/feeling:
    patch:
      tags: ['Own User']
      summary: Changes the user's feeling
      description: |-
        If the user does not exist, it will return an error (404).
        If the user exists but the token is incorrect, it will also return an error, stating that the action is not permitted.
        If everything goes fine it will return code 200.
      operationId: setFeeling
      parameters:
        - name: userid
          in: path
          description: id of the current user
          required: true
          schema:
            type: string
            example: '12s74fd8440d'
            pattern: 'ˆ.*?$'
            minLength: 15
            maxLength: 30
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                newfeeling:
                  type: number
                  example: 1
                  minLength: 1
                  maxLength: 1
        required: true
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Feeling change successful
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Action forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userid}/profilepicture:
    patch:
      tags: ['Own User']
      summary: Changes the user's profile picture
      description: |-
        If the user does not exist, it will return an error (404).
        If the user exists but the token is incorrect, it will also return an error stating that the action is not permitted.
        If everything goes fine it will return code 200.
      operationId: setProfilePicture
      parameters:
        - name: userid
          in: path
          description: id of the current user
          required: true
          schema:
            type: string
            example: '12s74fd8440d'
            pattern: 'ˆ.*?$'
            minLength: 15
            maxLength: 30
      requestBody:
        description: New picture data, in base64 format
        content:
          application/json:
            schema:
              type: object
              properties:
                newpicture:
                  type: string
                  example: 'BaWD39Sds4ndfi345dfjr0d=='
        required: true
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Picture change successful
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Action forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userid}/bio:
    patch:
      tags: ['Own User']
      summary: Changes the user's bio
      description: |-
        If the user does not exist, it will return an error (404).
        If the user exists but the token is incorrect, it will also return an error stating that the action is not permitted.
        If everything goes fine it will return code 200.
      operationId: setBio
      parameters:
        - name: userid
          in: path
          description: id of the current user
          required: true
          schema:
            type: string
            example: '12s74fd8440d'
            pattern: 'ˆ.*?$'
            minLength: 15
            maxLength: 30
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                newbio:
                  type: string
                  example: 'Hello guys!'
                  minLength: 0
                  maxLength: 160
        required: true
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Bio change successful
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Action forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userid}/follow:
    post:
      tags: ['Social']
      summary: Starts following an user
      description: |-
        If the user does not exist, it will return an error (404).
        If the user exists but the token is incorrect, it will also return an error stating that the action is not permitted.
        If everything goes fine it will return code 200.
        If the user has banned the requesting user, it will also return a 404 error.
      operationId: followUser
      parameters:
        - name: userid
          in: path
          description: id of the current user
          required: true
          schema:
            type: string
            example: '12s74fd8440d'
            pattern: 'ˆ.*?$'
            minLength: 15
            maxLength: 30
      security:
        - bearerAuth: []
      responses:
        '204':
          description: User followed successfully
        '404':
          description: User not found or requesting user banned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userid}/unfollow:
    post:
      tags: ['Social']
      summary: Stops following an user
      description: |-
        If the user does not exist, it will return an error (404).
        If the user exists but the token is incorrect, it will also return an error stating that the action is not permitted.
        If everything goes fine it will return code 200.
        If the user was not followed to begin with, it will return 200 too.
      operationId: unfollowUser
      parameters:
        - name: userid
          in: path
          description: id of the current user
          required: true
          schema:
            type: string
            example: '12s74fd8440d'
            pattern: 'ˆ.*?$'
            minLength: 15
            maxLength: 30
      security:
        - bearerAuth: []
      responses:
        '204':
          description: User unfollowed successfully
        '404':
          description: User not found or requesting user banned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userid}/ban:
    post:
      tags: ['Social']
      summary: Blocks a user from viewing a profile
      description: |-
        If the user does not exist, it will return an error (404).
        If the user exists but the token is incorrect, it will also return an error stating that the action is not permitted.
        If everything goes fine it will return code 200.
        If the user is the same as the requesting one, it will return a 403 error.
      operationId: banUser
      parameters:
        - name: userid
          in: path
          description: id of the current user
          required: true
          schema:
            type: string
            example: '12s74fd8440d'
            pattern: 'ˆ.*?$'
            minLength: 15
            maxLength: 30
      security:
        - bearerAuth: []
      responses:
        '204':
          description: User banned successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Operation not permitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userid}/unban:
    post:
      tags: ['Social']
      summary: Blocks a user from viewing a profile
      description: |-
        If the user does not exist, it will return an error (404).
        If the user exists but the token is incorrect, it will also return an error stating that the action is not permitted.
        If everything goes fine it will return code 204.
        If the user is the same as the requesting one, it will return a 403 error.
      operationId: unbanUser
      parameters:
        - name: userid
          in: path
          description: id of the current user
          required: true
          schema:
            type: string
            example: '12s74fd8440d'
            pattern: 'ˆ.*?$'
            minLength: 15
            maxLength: 30
      security:
        - bearerAuth: []
      responses:
        '204':
          description: User unbanned successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Operation not permitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /stream:
    get:
      tags: ['Main functions']
      summary: Gets the stream of the current user
      description: |-
        It will return the user's feed as an array of posts, or error 500 if an error in the backend occurs
      operationId: getMyStream
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Posts found and returned as an array
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userid}/profile:
    get:
      tags: ['Profiles']
      summary: Gets the profile of a given user
      description: |-
        If the user does not exist, it will return an error (404).
        If the user exists and the requesting user is not banned, it will return the user object.
        If the requesting user is banned, it will also return 404.
      operationId: getUserProfile
      parameters:
        - name: userid
          in: path
          description: id of the current user
          required: true
          schema:
            type: string
            example: '12s74fd8440d'
            pattern: 'ˆ.*?$'
            minLength: 15
            maxLength: 30
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userid}/following:
    get:
      tags: ['Profiles']
      summary: Gets the users that a given user is following
      description: |-
        If the user does not exist, it will return an error (404).
        If the user exists and the requesting user is not banned, it will return the user object.
        If the requesting user is banned, it will also return 404.
      operationId: getUserFollowing
      parameters:
        - name: userid
          in: path
          description: id of the current user
          required: true
          schema:
            type: string
            example: '12s74fd8440d'
            pattern: 'ˆ.*?$'
            minLength: 15
            maxLength: 30
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Users found and returned as an array
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 999999
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userid}/followers:
    get:
      tags: ['Profiles']
      summary: Gets the users that a given user is followed by
      description: |-
        If the user does not exist, it will return an error (404).
        If the user exists and the requesting user is not banned, it will return the user object.
        If the requesting user is banned, it will also return 404.
      operationId: getUserFollowers
      parameters:
        - name: userid
          in: path
          description: id of the user
          required: true
          schema:
            type: string
            example: '12s74fd8440d'
            pattern: 'ˆ.*?$'
            minLength: 15
            maxLength: 30
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Users found and returned as an array
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 999999
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /newphoto:
    post:
      tags: ['Posts']
      summary: Uploads a new picture
      description: |-
        If the token is incorrect, it will return an error stating that the action is not permitted.
        If everything goes fine it will return code 200.
      operationId: uploadPhoto
      requestBody:
        description: Base64 of the picture and caption
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                  example: 'CaAFodfdsfh=='
                caption:
                  type: string
                  example: 'Hello there'
        required: true
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Picture posted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '403':
          description: Operation not permitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/{postid}:
    delete:
      tags: ['Posts']
      summary: Deletes a picture
      description: |-
        If the token is incorrect, it will return an error stating that the action is not permitted.
        If everything goes fine it will return code 200.
      operationId: deletePhoto
      parameters:
        - name: postid
          in: path
          description: id of the picture we want to delete
          required: true
          schema:
            type: string
            example: '123s83uZv84'
            pattern: 'ˆ.*?$'
            minLength: 15
            maxLength: 30
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Picture deleted successfully
        '403':
          description: Operation not permitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/{postid}/like:
    post:
      tags: ['Posts']
      summary: Likes a picture
      description: |-
        If the token is incorrect, it will return an error stating that the action is not permitted.
        If everything goes fine it will return code 200.
        If the picture was already liked it will return 200 too.
      operationId: likePhoto
      parameters:
        - name: postid
          in: path
          description: id of the picture we want to like
          required: true
          schema:
            type: string
            example: '123s83uZv84'
            pattern: 'ˆ.*?$'
            minLength: 15
            maxLength: 30
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Picture liked successfully
        '403':
          description: Operation not permitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/{postid}/unlike:
    post:
      tags: ['Posts']
      summary: Unlikes a picture
      description: |-
        If the token is incorrect, it will return an error stating that the action is not permitted.
        If everything goes fine it will return code 200.
        If the picture was already liked it will return 200 too.
      operationId: unlikePhoto
      parameters:
        - name: postid
          in: path
          description: id of the picture we want to unlike
          required: true
          schema:
            type: string
            example: '123s83uZv84'
            pattern: 'ˆ.*?$'
            minLength: 15
            maxLength: 30
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Picture unliked successfully
        '403':
          description: Operation not permitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/{postid}/comment:
    post:
      tags: ['Posts']
      summary: Comments a picture
      description: |-
        If the token is incorrect, it will return an error stating that the action is not permitted.
        If everything goes fine it will return code 200.
      operationId: commentPhoto
      parameters:
        - name: postid
          in: path
          description: id of the picture we want to comment
          required: true
          schema:
            type: string
            example: '123s83uZv84'
            pattern: 'ˆ.*?$'
            minLength: 15
            maxLength: 30
      requestBody:
        description: comment text
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  example: 'Good picure!'
        required: true
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '403':
          description: Operation not permitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /comments/{id}:
    delete:
      tags: ['Posts']
      summary: Deletes a comment
      description: |-
        If the token is incorrect, it will return an error stating that the action is not permitted.
        If everything goes fine it will return code 200.
      operationId: uncommentPhoto
      parameters:
        - name: id
          in: path
          description: ID of the comment to delete
          required: true
          schema:
            type: string
            example: '123s83uZv84'
            pattern: 'ˆ.*?$'
            minLength: 15
            maxLength: 30
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Comment deleted successfully
        '403':
          description: Operation not permitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/{postid}/comments:
    get:
      tags: ['Posts']
      summary: Gets the comments of a given picture
      description: |-
        If the picture does not exist, it will return an error (404).
        If the picture exists and the requesting user is not banned, it will return the user object.
        If the requesting user is banned, it will also return 404.
      operationId: getComments
      parameters:
        - name: postid
          in: path
          description: ID of the picture to get the comments of
          required: true
          schema:
            type: string
            example: '123s83uZv84'
            pattern: 'ˆ.*?$'
            minLength: 15
            maxLength: 30
      responses:
        '200':
          description: Comments found and returned as an array
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 999999
                items:
                  $ref: '#/components/schemas/Comment'
        '404':
          description: Picture not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/{postid}/likes:
    get:
      tags: ['Posts']
      summary: Gets the likes of a given picture
      description: |-
        If the picture does not exist, it will return an error (404).
        If the picture exists and the requesting user is not banned, it will return the user object.
        If the requesting user is banned, it will also return 404.
      operationId: getLikes
      parameters:
        - name: postid
          in: path
          description: ID of the picture to get the likes of
          required: true
          schema:
            type: string
            example: '123s83uZv84'
            pattern: 'ˆ.*?$'
            minLength: 15
            maxLength: 30
      responses:
        '200':
          description: Users found and returned as an array
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 999999
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: Picture not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  schemas:
    User:
      type: object
      description: The User Object
      properties:
        id:
          description: ID of the user
          type: string
          example: '12s74fd8440d'
          pattern: 'ˆ.*?$'
          minLength: 15
          maxLength: 30
        username:
          description: username of the user
          type: string
          example: 'Maria'
          pattern: 'ˆ.*?$'
          minLength: 3
          maxLength: 16
        feeling:
          description: feeling of the user
          type: number
        bio:
          description: bio of the user
          type: string
          example: 'Hello! What a wonderul world'
          pattern: 'ˆ.*?$'
          minLength: 0
          maxLength: 160
        pictureURL:
          description: profile picture of the user
          type: string
          example: 'api.com/Maria/propic.jpg'
          pattern: 'ˆ.*?$'

    Comment:
      type: object
      description: The Comment Object
      properties:
        id:
          description: ID of the comment
          type: string
          example: '12s74fd8440d'
          pattern: 'ˆ.*?$'
          minLength: 15
          maxLength: 30
        userid:
          description: ID of the author
          type: string
          example: '12s74fd8440d'
          pattern: 'ˆ.*?$'
          minLength: 15
          maxLength: 30
        username:
          description: username of the author
          type: string
          example: 'Maria'
          pattern: 'ˆ.*?$'
          minLength: 3
          maxLength: 16
        feeling:
          description: feeling of the author
          type: number
        pictureURL:
          description: profile picture of the author
          type: string
          example: 'api.com/Maria/propic.jpg'
          pattern: 'ˆ.*?$'
        text:
          description: text of the comment
          type: string
          example: 'Good one!'
          pattern: 'ˆ.*?$'
          minLength: 0
          maxLength: 160

    Post:
      type: object
      description: The Post Object
      properties:
        postid:
          description: ID of the post
          type: string
          example: '12s74fd8440d'
          pattern: 'ˆ.*?$'
          minLength: 15
          maxLength: 30
        userid:
          description: ID of the author
          type: string
          example: 'uXs71f4sdf0X'
          pattern: 'ˆ.*?$'
          minLength: 15
          maxLength: 30
        username:
          description: username of the author
          type: string
          example: 'Maria'
          pattern: 'ˆ.*?$'
          minLength: 3
          maxLength: 16
        feeling:
          description: feeling of the author
          type: number
        profilePictureURL:
          description: profile picture of the author
          type: string
          example: 'api.com/Maria/propic.jpg'
          pattern: 'ˆ.*?$'
        pictureURL:
          description: url of the picture in the post
          type: string
          example: 'api.com/posts/picture123.jpg'
          pattern: 'ˆ.*?$'
        caption:
          description: caption of the post
          type: string
          example: 'Hello :) !'
          pattern: 'ˆ.*?$'
          minLength: 0
          maxLength: 160
        createdAt:
          description: date of creation
          type: number
          example: 244358438755348
        likecount:
          description: like count of the post
          type: number
          example: 12

    UserProfile:
      type: object
      description: The Profile Object
      properties:
        id:
          description: ID of the user
          type: string
          example: '12s74fd8440d'
          pattern: 'ˆ.*?$'
          minLength: 15
          maxLength: 30
        username:
          description: username of the user
          type: string
          example: 'Maria'
          pattern: 'ˆ.*?$'
          minLength: 3
          maxLength: 16
        feeling:
          description: feeling of the user
          type: number
        profilePictureURL:
          description: profile picture of the user
          type: string
          example: 'api.com/Maria/propic.jpg'
          pattern: 'ˆ.*?$'
        posts:
          description: posts of the user
          type: array
          minItems: 0
          maxItems: 999999
          items:
            description: posts array
            type: object
            properties:
              postid:
                description: ID of the post
                type: string
                example: '12s74fd8440d'
              pictureURL:
                description: url of the picture
                type: string
                example: 'api.com/posts/picture123.jpg'
                pattern: 'ˆ.*?$'
              caption:
                description: caption of the post
                type: string
                example: 'Hello :) !'
              createdAt:
                description: creation date of the post
                type: number
                example: 244358438755348
              likecount:
                description: like count of the post
                type: number
                example: 12
    Error:
      type: object
      description: The error Object
      properties:
        code:
          type: integer
          description: The HTTP status code of the error.
        message:
          type: string
          description: A human-readable message describing the error.
